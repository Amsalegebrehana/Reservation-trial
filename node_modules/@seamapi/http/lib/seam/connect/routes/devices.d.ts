import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import type { SetNonNullable } from 'type-fest';
import { type Client } from '../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../lib/seam/connect/options.js';
import { SeamHttpDevicesUnmanaged } from './devices-unmanaged.js';
export declare class SeamHttpDevices {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpDevices;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpDevices;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpDevices;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpDevices>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpDevices;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpDevices;
    get unmanaged(): SeamHttpDevicesUnmanaged;
    delete(body?: DevicesDeleteBody): Promise<void>;
    get(body?: DevicesGetParams): Promise<DevicesGetResponse['device']>;
    list(body?: DevicesListParams): Promise<DevicesListResponse['devices']>;
    listDeviceProviders(body?: DevicesListDeviceProvidersParams): Promise<DevicesListDeviceProvidersResponse['device_providers']>;
    update(body?: DevicesUpdateBody): Promise<void>;
}
export type DevicesDeleteBody = RouteRequestBody<'/devices/delete'>;
export type DevicesDeleteResponse = SetNonNullable<Required<RouteResponse<'/devices/delete'>>>;
export type DevicesDeleteOptions = never;
export type DevicesGetParams = RouteRequestBody<'/devices/get'>;
export type DevicesGetResponse = SetNonNullable<Required<RouteResponse<'/devices/get'>>>;
export type DevicesGetOptions = never;
export type DevicesListParams = RouteRequestBody<'/devices/list'>;
export type DevicesListResponse = SetNonNullable<Required<RouteResponse<'/devices/list'>>>;
export type DevicesListOptions = never;
export type DevicesListDeviceProvidersParams = RouteRequestBody<'/devices/list_device_providers'>;
export type DevicesListDeviceProvidersResponse = SetNonNullable<Required<RouteResponse<'/devices/list_device_providers'>>>;
export type DevicesListDeviceProvidersOptions = never;
export type DevicesUpdateBody = RouteRequestBody<'/devices/update'>;
export type DevicesUpdateResponse = SetNonNullable<Required<RouteResponse<'/devices/update'>>>;
export type DevicesUpdateOptions = never;
