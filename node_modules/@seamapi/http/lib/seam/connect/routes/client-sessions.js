/*
 * Automatically generated by generate-routes.ts.
 * Do not edit this file or add other files to this directory.
 */
import { warnOnInsecureuserIdentifierKey } from '../../../../lib/seam/connect/auth.js';
import { createClient } from '../../../../lib/seam/connect/client.js';
import { isSeamHttpOptionsWithApiKey, isSeamHttpOptionsWithClient, isSeamHttpOptionsWithClientSessionToken, isSeamHttpOptionsWithConsoleSessionToken, isSeamHttpOptionsWithPersonalAccessToken, SeamHttpInvalidOptionsError, } from '../../../../lib/seam/connect/options.js';
import { limitToSeamHttpRequestOptions, parseOptions, } from '../../../../lib/seam/connect/parse-options.js';
export class SeamHttpClientSessions {
    constructor(apiKeyOrOptions = {}) {
        const options = parseOptions(apiKeyOrOptions);
        this.client = 'client' in options ? options.client : createClient(options);
        this.defaults = limitToSeamHttpRequestOptions(options);
    }
    static fromClient(client, options = {}) {
        const constructorOptions = { ...options, client };
        if (!isSeamHttpOptionsWithClient(constructorOptions)) {
            throw new SeamHttpInvalidOptionsError('Missing client');
        }
        return new SeamHttpClientSessions(constructorOptions);
    }
    static fromApiKey(apiKey, options = {}) {
        const constructorOptions = { ...options, apiKey };
        if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {
            throw new SeamHttpInvalidOptionsError('Missing apiKey');
        }
        return new SeamHttpClientSessions(constructorOptions);
    }
    static fromClientSessionToken(clientSessionToken, options = {}) {
        const constructorOptions = { ...options, clientSessionToken };
        if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {
            throw new SeamHttpInvalidOptionsError('Missing clientSessionToken');
        }
        return new SeamHttpClientSessions(constructorOptions);
    }
    static async fromPublishableKey(publishableKey, userIdentifierKey, options = {}) {
        warnOnInsecureuserIdentifierKey(userIdentifierKey);
        const clientOptions = parseOptions({ ...options, publishableKey });
        if (isSeamHttpOptionsWithClient(clientOptions)) {
            throw new SeamHttpInvalidOptionsError('The client option cannot be used with SeamHttp.fromPublishableKey');
        }
        const client = createClient(clientOptions);
        const clientSessions = SeamHttpClientSessions.fromClient(client);
        const { token } = await clientSessions.getOrCreate({
            user_identifier_key: userIdentifierKey,
        });
        return SeamHttpClientSessions.fromClientSessionToken(token, options);
    }
    static fromConsoleSessionToken(consoleSessionToken, workspaceId, options = {}) {
        const constructorOptions = { ...options, consoleSessionToken, workspaceId };
        if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {
            throw new SeamHttpInvalidOptionsError('Missing consoleSessionToken or workspaceId');
        }
        return new SeamHttpClientSessions(constructorOptions);
    }
    static fromPersonalAccessToken(personalAccessToken, workspaceId, options = {}) {
        const constructorOptions = { ...options, personalAccessToken, workspaceId };
        if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {
            throw new SeamHttpInvalidOptionsError('Missing personalAccessToken or workspaceId');
        }
        return new SeamHttpClientSessions(constructorOptions);
    }
    async create(body) {
        const { data } = await this.client.request({
            url: '/client_sessions/create',
            method: 'post',
            data: body,
        });
        return data.client_session;
    }
    async delete(body) {
        await this.client.request({
            url: '/client_sessions/delete',
            method: 'post',
            data: body,
        });
    }
    async get(body) {
        const { data } = await this.client.request({
            url: '/client_sessions/get',
            method: 'post',
            data: body,
        });
        return data.client_session;
    }
    async getOrCreate(body) {
        const { data } = await this.client.request({
            url: '/client_sessions/get_or_create',
            method: 'post',
            data: body,
        });
        return data.client_session;
    }
    async grantAccess(body) {
        const { data } = await this.client.request({
            url: '/client_sessions/grant_access',
            method: 'post',
            data: body,
        });
        return data.client_session;
    }
    async list(body) {
        const { data } = await this.client.request({
            url: '/client_sessions/list',
            method: 'post',
            data: body,
        });
        return data.client_sessions;
    }
    async revoke(body) {
        await this.client.request({
            url: '/client_sessions/revoke',
            method: 'post',
            data: body,
        });
    }
}
//# sourceMappingURL=client-sessions.js.map