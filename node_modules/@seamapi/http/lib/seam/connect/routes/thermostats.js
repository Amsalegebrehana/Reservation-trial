/*
 * Automatically generated by generate-routes.ts.
 * Do not edit this file or add other files to this directory.
 */
import { warnOnInsecureuserIdentifierKey } from '../../../../lib/seam/connect/auth.js';
import { createClient } from '../../../../lib/seam/connect/client.js';
import { isSeamHttpOptionsWithApiKey, isSeamHttpOptionsWithClient, isSeamHttpOptionsWithClientSessionToken, isSeamHttpOptionsWithConsoleSessionToken, isSeamHttpOptionsWithPersonalAccessToken, SeamHttpInvalidOptionsError, } from '../../../../lib/seam/connect/options.js';
import { limitToSeamHttpRequestOptions, parseOptions, } from '../../../../lib/seam/connect/parse-options.js';
import { SeamHttpClientSessions } from './client-sessions.js';
import { SeamHttpThermostatsClimateSettingSchedules } from './thermostats-climate-setting-schedules.js';
export class SeamHttpThermostats {
    constructor(apiKeyOrOptions = {}) {
        const options = parseOptions(apiKeyOrOptions);
        this.client = 'client' in options ? options.client : createClient(options);
        this.defaults = limitToSeamHttpRequestOptions(options);
    }
    static fromClient(client, options = {}) {
        const constructorOptions = { ...options, client };
        if (!isSeamHttpOptionsWithClient(constructorOptions)) {
            throw new SeamHttpInvalidOptionsError('Missing client');
        }
        return new SeamHttpThermostats(constructorOptions);
    }
    static fromApiKey(apiKey, options = {}) {
        const constructorOptions = { ...options, apiKey };
        if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {
            throw new SeamHttpInvalidOptionsError('Missing apiKey');
        }
        return new SeamHttpThermostats(constructorOptions);
    }
    static fromClientSessionToken(clientSessionToken, options = {}) {
        const constructorOptions = { ...options, clientSessionToken };
        if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {
            throw new SeamHttpInvalidOptionsError('Missing clientSessionToken');
        }
        return new SeamHttpThermostats(constructorOptions);
    }
    static async fromPublishableKey(publishableKey, userIdentifierKey, options = {}) {
        warnOnInsecureuserIdentifierKey(userIdentifierKey);
        const clientOptions = parseOptions({ ...options, publishableKey });
        if (isSeamHttpOptionsWithClient(clientOptions)) {
            throw new SeamHttpInvalidOptionsError('The client option cannot be used with SeamHttp.fromPublishableKey');
        }
        const client = createClient(clientOptions);
        const clientSessions = SeamHttpClientSessions.fromClient(client);
        const { token } = await clientSessions.getOrCreate({
            user_identifier_key: userIdentifierKey,
        });
        return SeamHttpThermostats.fromClientSessionToken(token, options);
    }
    static fromConsoleSessionToken(consoleSessionToken, workspaceId, options = {}) {
        const constructorOptions = { ...options, consoleSessionToken, workspaceId };
        if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {
            throw new SeamHttpInvalidOptionsError('Missing consoleSessionToken or workspaceId');
        }
        return new SeamHttpThermostats(constructorOptions);
    }
    static fromPersonalAccessToken(personalAccessToken, workspaceId, options = {}) {
        const constructorOptions = { ...options, personalAccessToken, workspaceId };
        if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {
            throw new SeamHttpInvalidOptionsError('Missing personalAccessToken or workspaceId');
        }
        return new SeamHttpThermostats(constructorOptions);
    }
    get climateSettingSchedules() {
        return SeamHttpThermostatsClimateSettingSchedules.fromClient(this.client, this.defaults);
    }
    async cool(body) {
        await this.client.request({
            url: '/thermostats/cool',
            method: 'post',
            data: body,
        });
    }
    async get(body) {
        const { data } = await this.client.request({
            url: '/thermostats/get',
            method: 'post',
            data: body,
        });
        return data.thermostat;
    }
    async heat(body) {
        await this.client.request({
            url: '/thermostats/heat',
            method: 'post',
            data: body,
        });
    }
    async heatCool(body) {
        await this.client.request({
            url: '/thermostats/heat_cool',
            method: 'post',
            data: body,
        });
    }
    async list(body) {
        const { data } = await this.client.request({
            url: '/thermostats/list',
            method: 'post',
            data: body,
        });
        return data.thermostats;
    }
    async off(body) {
        await this.client.request({
            url: '/thermostats/off',
            method: 'post',
            data: body,
        });
    }
    async setFanMode(body) {
        await this.client.request({
            url: '/thermostats/set_fan_mode',
            method: 'post',
            data: body,
        });
    }
    async update(body) {
        await this.client.request({
            url: '/thermostats/update',
            method: 'post',
            data: body,
        });
    }
}
//# sourceMappingURL=thermostats.js.map