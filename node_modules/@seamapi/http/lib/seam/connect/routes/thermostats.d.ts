import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import type { SetNonNullable } from 'type-fest';
import { type Client } from '../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../lib/seam/connect/options.js';
import { SeamHttpThermostatsClimateSettingSchedules } from './thermostats-climate-setting-schedules.js';
export declare class SeamHttpThermostats {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpThermostats;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpThermostats;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpThermostats;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpThermostats>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpThermostats;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpThermostats;
    get climateSettingSchedules(): SeamHttpThermostatsClimateSettingSchedules;
    cool(body?: ThermostatsCoolBody): Promise<void>;
    get(body?: ThermostatsGetParams): Promise<ThermostatsGetResponse['thermostat']>;
    heat(body?: ThermostatsHeatBody): Promise<void>;
    heatCool(body?: ThermostatsHeatCoolBody): Promise<void>;
    list(body?: ThermostatsListParams): Promise<ThermostatsListResponse['thermostats']>;
    off(body?: ThermostatsOffBody): Promise<void>;
    setFanMode(body?: ThermostatsSetFanModeBody): Promise<void>;
    update(body?: ThermostatsUpdateBody): Promise<void>;
}
export type ThermostatsCoolBody = RouteRequestBody<'/thermostats/cool'>;
export type ThermostatsCoolResponse = SetNonNullable<Required<RouteResponse<'/thermostats/cool'>>>;
export type ThermostatsCoolOptions = never;
export type ThermostatsGetParams = RouteRequestBody<'/thermostats/get'>;
export type ThermostatsGetResponse = SetNonNullable<Required<RouteResponse<'/thermostats/get'>>>;
export type ThermostatsGetOptions = never;
export type ThermostatsHeatBody = RouteRequestBody<'/thermostats/heat'>;
export type ThermostatsHeatResponse = SetNonNullable<Required<RouteResponse<'/thermostats/heat'>>>;
export type ThermostatsHeatOptions = never;
export type ThermostatsHeatCoolBody = RouteRequestBody<'/thermostats/heat_cool'>;
export type ThermostatsHeatCoolResponse = SetNonNullable<Required<RouteResponse<'/thermostats/heat_cool'>>>;
export type ThermostatsHeatCoolOptions = never;
export type ThermostatsListParams = RouteRequestBody<'/thermostats/list'>;
export type ThermostatsListResponse = SetNonNullable<Required<RouteResponse<'/thermostats/list'>>>;
export type ThermostatsListOptions = never;
export type ThermostatsOffBody = RouteRequestBody<'/thermostats/off'>;
export type ThermostatsOffResponse = SetNonNullable<Required<RouteResponse<'/thermostats/off'>>>;
export type ThermostatsOffOptions = never;
export type ThermostatsSetFanModeBody = RouteRequestBody<'/thermostats/set_fan_mode'>;
export type ThermostatsSetFanModeResponse = SetNonNullable<Required<RouteResponse<'/thermostats/set_fan_mode'>>>;
export type ThermostatsSetFanModeOptions = never;
export type ThermostatsUpdateBody = RouteRequestBody<'/thermostats/update'>;
export type ThermostatsUpdateResponse = SetNonNullable<Required<RouteResponse<'/thermostats/update'>>>;
export type ThermostatsUpdateOptions = never;
