import { z } from 'zod';
export declare const device_category: z.ZodEnum<["smartlock", "sensor", "thermostat", "relay", "intercom", "accessory"]>;
export type DeviceCategory = z.infer<typeof device_category>;
export declare const device_connection_type: z.ZodEnum<["wifi", "zwave", "zigbee", "unknown"]>;
export type DeviceConnectionType = z.infer<typeof device_connection_type>;
export declare const thermostat: z.ZodObject<{
    main_category: z.ZodLiteral<"thermostat">;
    physical_properties: z.ZodObject<{
        available_modes: z.ZodArray<z.ZodEnum<["heat", "cool", "fan", "eco"]>, "many">;
        is_heat_pump_compatible: z.ZodBoolean;
        has_occupancy_detection: z.ZodBoolean;
        supports_demand_response: z.ZodBoolean;
        has_humidity_sensor: z.ZodBoolean;
        has_temperature_sensor: z.ZodBoolean;
        supports_emergency_heating_mode: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
        available_modes: ("heat" | "cool" | "fan" | "eco")[];
        is_heat_pump_compatible: boolean;
        supports_demand_response: boolean;
        supports_emergency_heating_mode: boolean;
    }, {
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
        available_modes: ("heat" | "cool" | "fan" | "eco")[];
        is_heat_pump_compatible: boolean;
        supports_demand_response: boolean;
        supports_emergency_heating_mode: boolean;
    }>;
    software_features: z.ZodObject<{
        can_program_climate_schedules: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        can_program_climate_schedules: boolean;
    }, {
        can_program_climate_schedules: boolean;
    }>;
}, "strip", z.ZodTypeAny, {
    main_category: "thermostat";
    physical_properties: {
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
        available_modes: ("heat" | "cool" | "fan" | "eco")[];
        is_heat_pump_compatible: boolean;
        supports_demand_response: boolean;
        supports_emergency_heating_mode: boolean;
    };
    software_features: {
        can_program_climate_schedules: boolean;
    };
}, {
    main_category: "thermostat";
    physical_properties: {
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
        available_modes: ("heat" | "cool" | "fan" | "eco")[];
        is_heat_pump_compatible: boolean;
        supports_demand_response: boolean;
        supports_emergency_heating_mode: boolean;
    };
    software_features: {
        can_program_climate_schedules: boolean;
    };
}>;
export type ThermostatPropertiesV1 = z.infer<typeof thermostat>;
export declare const device_model_category_specific_properties: z.ZodDiscriminatedUnion<"main_category", [z.ZodObject<{
    main_category: z.ZodLiteral<"smartlock">;
    physical_properties: z.ZodObject<{
        lock_type: z.ZodEnum<["deadbolt", "lever", "mortise", "lockbox", "cylinder", "padlock", "locker", "unknown"]>;
        has_physical_key: z.ZodBoolean;
        has_camera: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        lock_type: "unknown" | "deadbolt" | "lever" | "mortise" | "lockbox" | "cylinder" | "padlock" | "locker";
        has_physical_key: boolean;
        has_camera: boolean;
    }, {
        lock_type: "unknown" | "deadbolt" | "lever" | "mortise" | "lockbox" | "cylinder" | "padlock" | "locker";
        has_physical_key: boolean;
        has_camera: boolean;
    }>;
    software_features: z.ZodObject<{
        can_remotely_unlock: z.ZodBoolean;
        can_program_access_codes: z.ZodBoolean;
        can_program_access_schedules: z.ZodBoolean;
        can_program_access_codes_offline: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_program_access_schedules: boolean;
        can_program_access_codes_offline: boolean;
    }, {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_program_access_schedules: boolean;
        can_program_access_codes_offline: boolean;
    }>;
}, "strip", z.ZodTypeAny, {
    main_category: "smartlock";
    physical_properties: {
        lock_type: "unknown" | "deadbolt" | "lever" | "mortise" | "lockbox" | "cylinder" | "padlock" | "locker";
        has_physical_key: boolean;
        has_camera: boolean;
    };
    software_features: {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_program_access_schedules: boolean;
        can_program_access_codes_offline: boolean;
    };
}, {
    main_category: "smartlock";
    physical_properties: {
        lock_type: "unknown" | "deadbolt" | "lever" | "mortise" | "lockbox" | "cylinder" | "padlock" | "locker";
        has_physical_key: boolean;
        has_camera: boolean;
    };
    software_features: {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_program_access_schedules: boolean;
        can_program_access_codes_offline: boolean;
    };
}>, z.ZodObject<{
    main_category: z.ZodLiteral<"sensor">;
    physical_properties: z.ZodObject<{
        has_noise_sensor: z.ZodBoolean;
        has_humidity_sensor: z.ZodBoolean;
        has_temperature_sensor: z.ZodBoolean;
        has_occupancy_detection: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        has_noise_sensor: boolean;
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
    }, {
        has_noise_sensor: boolean;
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
    }>;
}, "strip", z.ZodTypeAny, {
    main_category: "sensor";
    physical_properties: {
        has_noise_sensor: boolean;
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
    };
}, {
    main_category: "sensor";
    physical_properties: {
        has_noise_sensor: boolean;
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
    };
}>, z.ZodObject<{
    main_category: z.ZodLiteral<"thermostat">;
    physical_properties: z.ZodObject<{
        available_modes: z.ZodArray<z.ZodEnum<["heat", "cool", "fan", "eco"]>, "many">;
        is_heat_pump_compatible: z.ZodBoolean;
        has_occupancy_detection: z.ZodBoolean;
        supports_demand_response: z.ZodBoolean;
        has_humidity_sensor: z.ZodBoolean;
        has_temperature_sensor: z.ZodBoolean;
        supports_emergency_heating_mode: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
        available_modes: ("heat" | "cool" | "fan" | "eco")[];
        is_heat_pump_compatible: boolean;
        supports_demand_response: boolean;
        supports_emergency_heating_mode: boolean;
    }, {
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
        available_modes: ("heat" | "cool" | "fan" | "eco")[];
        is_heat_pump_compatible: boolean;
        supports_demand_response: boolean;
        supports_emergency_heating_mode: boolean;
    }>;
    software_features: z.ZodObject<{
        can_program_climate_schedules: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        can_program_climate_schedules: boolean;
    }, {
        can_program_climate_schedules: boolean;
    }>;
}, "strip", z.ZodTypeAny, {
    main_category: "thermostat";
    physical_properties: {
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
        available_modes: ("heat" | "cool" | "fan" | "eco")[];
        is_heat_pump_compatible: boolean;
        supports_demand_response: boolean;
        supports_emergency_heating_mode: boolean;
    };
    software_features: {
        can_program_climate_schedules: boolean;
    };
}, {
    main_category: "thermostat";
    physical_properties: {
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
        available_modes: ("heat" | "cool" | "fan" | "eco")[];
        is_heat_pump_compatible: boolean;
        supports_demand_response: boolean;
        supports_emergency_heating_mode: boolean;
    };
    software_features: {
        can_program_climate_schedules: boolean;
    };
}>, z.ZodObject<{
    main_category: z.ZodLiteral<"relay">;
}, "strip", z.ZodTypeAny, {
    main_category: "relay";
}, {
    main_category: "relay";
}>, z.ZodObject<{
    main_category: z.ZodLiteral<"intercom">;
    physical_properties: z.ZodObject<{
        has_camera: z.ZodBoolean;
        has_rfid_reader: z.ZodDefault<z.ZodBoolean>;
        has_nfc_reader: z.ZodDefault<z.ZodBoolean>;
        has_wiegand_interface: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        has_camera: boolean;
        has_rfid_reader: boolean;
        has_nfc_reader: boolean;
        has_wiegand_interface: boolean;
    }, {
        has_camera: boolean;
        has_rfid_reader?: boolean | undefined;
        has_nfc_reader?: boolean | undefined;
        has_wiegand_interface?: boolean | undefined;
    }>;
    software_features: z.ZodObject<{
        can_remotely_unlock: z.ZodBoolean;
        can_program_access_codes: z.ZodBoolean;
        can_unlock_with_face_recognition: z.ZodDefault<z.ZodBoolean>;
        supports_onvif: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_unlock_with_face_recognition: boolean;
        supports_onvif: boolean;
    }, {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_unlock_with_face_recognition?: boolean | undefined;
        supports_onvif?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    main_category: "intercom";
    physical_properties: {
        has_camera: boolean;
        has_rfid_reader: boolean;
        has_nfc_reader: boolean;
        has_wiegand_interface: boolean;
    };
    software_features: {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_unlock_with_face_recognition: boolean;
        supports_onvif: boolean;
    };
}, {
    main_category: "intercom";
    physical_properties: {
        has_camera: boolean;
        has_rfid_reader?: boolean | undefined;
        has_nfc_reader?: boolean | undefined;
        has_wiegand_interface?: boolean | undefined;
    };
    software_features: {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_unlock_with_face_recognition?: boolean | undefined;
        supports_onvif?: boolean | undefined;
    };
}>, z.ZodObject<{
    main_category: z.ZodLiteral<"accessory">;
}, "strip", z.ZodTypeAny, {
    main_category: "accessory";
}, {
    main_category: "accessory";
}>]>;
export declare const base_device_model_v1: z.ZodObject<{
    device_model_id: z.ZodString;
    manufacturer: z.ZodObject<Omit<{
        manufacturer_id: z.ZodString;
        display_name: z.ZodString;
        logo: z.ZodOptional<z.ZodObject<{
            url: z.ZodString;
            width: z.ZodNumber;
            height: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            height: number;
            width: number;
            url: string;
        }, {
            height: number;
            width: number;
            url: string;
        }>>;
        integration: z.ZodEnum<["stable", "beta", "planned", "unsupported", "inquire"]>;
        integration_support_level: z.ZodEnum<["stable", "beta", "planned", "unsupported", "inquire"]>;
        is_connect_webview_supported: z.ZodBoolean;
        requires_seam_support_to_add_account: z.ZodBoolean;
        device_model_count: z.ZodNumber;
        annotations: z.ZodArray<z.ZodObject<{
            annotation_code: z.ZodEnum<["subscription_required"]>;
            message: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            message: string;
            annotation_code: "subscription_required";
        }, {
            message: string;
            annotation_code: "subscription_required";
        }>, "many">;
    }, "device_model_count">, "strip", z.ZodTypeAny, {
        display_name: string;
        manufacturer_id: string;
        integration: "beta" | "stable" | "unsupported" | "planned" | "inquire";
        integration_support_level: "beta" | "stable" | "unsupported" | "planned" | "inquire";
        is_connect_webview_supported: boolean;
        requires_seam_support_to_add_account: boolean;
        annotations: {
            message: string;
            annotation_code: "subscription_required";
        }[];
        logo?: {
            height: number;
            width: number;
            url: string;
        } | undefined;
    }, {
        display_name: string;
        manufacturer_id: string;
        integration: "beta" | "stable" | "unsupported" | "planned" | "inquire";
        integration_support_level: "beta" | "stable" | "unsupported" | "planned" | "inquire";
        is_connect_webview_supported: boolean;
        requires_seam_support_to_add_account: boolean;
        annotations: {
            message: string;
            annotation_code: "subscription_required";
        }[];
        logo?: {
            height: number;
            width: number;
            url: string;
        } | undefined;
    }>;
    is_device_supported: z.ZodBoolean;
    display_name: z.ZodString;
    description: z.ZodString;
    product_url: z.ZodOptional<z.ZodString>;
    main_connection_type: z.ZodEnum<["wifi", "zwave", "zigbee", "unknown"]>;
    aesthetic_variants: z.ZodArray<z.ZodObject<{
        slug: z.ZodString;
        display_name: z.ZodString;
        primary_color_hex: z.ZodOptional<z.ZodString>;
        manufacturer_sku: z.ZodOptional<z.ZodString>;
        front_image: z.ZodOptional<z.ZodObject<{
            url: z.ZodString;
            width: z.ZodNumber;
            height: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            height: number;
            width: number;
            url: string;
        }, {
            height: number;
            width: number;
            url: string;
        }>>;
        back_image: z.ZodOptional<z.ZodObject<{
            url: z.ZodString;
            width: z.ZodNumber;
            height: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            height: number;
            width: number;
            url: string;
        }, {
            height: number;
            width: number;
            url: string;
        }>>;
        images: z.ZodArray<z.ZodObject<{
            url: z.ZodString;
            width: z.ZodNumber;
            height: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            height: number;
            width: number;
            url: string;
        }, {
            height: number;
            width: number;
            url: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        display_name: string;
        slug: string;
        images: {
            height: number;
            width: number;
            url: string;
        }[];
        primary_color_hex?: string | undefined;
        manufacturer_sku?: string | undefined;
        front_image?: {
            height: number;
            width: number;
            url: string;
        } | undefined;
        back_image?: {
            height: number;
            width: number;
            url: string;
        } | undefined;
    }, {
        display_name: string;
        slug: string;
        images: {
            height: number;
            width: number;
            url: string;
        }[];
        primary_color_hex?: string | undefined;
        manufacturer_sku?: string | undefined;
        front_image?: {
            height: number;
            width: number;
            url: string;
        } | undefined;
        back_image?: {
            height: number;
            width: number;
            url: string;
        } | undefined;
    }>, "many">;
    power_sources: z.ZodArray<z.ZodEnum<["battery", "hardwired", "mechanical_harvesting", "wireless", "ethernet"]>, "many">;
}, "strip", z.ZodTypeAny, {
    description: string;
    display_name: string;
    device_model_id: string;
    manufacturer: {
        display_name: string;
        manufacturer_id: string;
        integration: "beta" | "stable" | "unsupported" | "planned" | "inquire";
        integration_support_level: "beta" | "stable" | "unsupported" | "planned" | "inquire";
        is_connect_webview_supported: boolean;
        requires_seam_support_to_add_account: boolean;
        annotations: {
            message: string;
            annotation_code: "subscription_required";
        }[];
        logo?: {
            height: number;
            width: number;
            url: string;
        } | undefined;
    };
    is_device_supported: boolean;
    main_connection_type: "unknown" | "wifi" | "zwave" | "zigbee";
    aesthetic_variants: {
        display_name: string;
        slug: string;
        images: {
            height: number;
            width: number;
            url: string;
        }[];
        primary_color_hex?: string | undefined;
        manufacturer_sku?: string | undefined;
        front_image?: {
            height: number;
            width: number;
            url: string;
        } | undefined;
        back_image?: {
            height: number;
            width: number;
            url: string;
        } | undefined;
    }[];
    power_sources: ("battery" | "hardwired" | "mechanical_harvesting" | "wireless" | "ethernet")[];
    product_url?: string | undefined;
}, {
    description: string;
    display_name: string;
    device_model_id: string;
    manufacturer: {
        display_name: string;
        manufacturer_id: string;
        integration: "beta" | "stable" | "unsupported" | "planned" | "inquire";
        integration_support_level: "beta" | "stable" | "unsupported" | "planned" | "inquire";
        is_connect_webview_supported: boolean;
        requires_seam_support_to_add_account: boolean;
        annotations: {
            message: string;
            annotation_code: "subscription_required";
        }[];
        logo?: {
            height: number;
            width: number;
            url: string;
        } | undefined;
    };
    is_device_supported: boolean;
    main_connection_type: "unknown" | "wifi" | "zwave" | "zigbee";
    aesthetic_variants: {
        display_name: string;
        slug: string;
        images: {
            height: number;
            width: number;
            url: string;
        }[];
        primary_color_hex?: string | undefined;
        manufacturer_sku?: string | undefined;
        front_image?: {
            height: number;
            width: number;
            url: string;
        } | undefined;
        back_image?: {
            height: number;
            width: number;
            url: string;
        } | undefined;
    }[];
    power_sources: ("battery" | "hardwired" | "mechanical_harvesting" | "wireless" | "ethernet")[];
    product_url?: string | undefined;
}>;
export type BaseDeviceModelV1 = z.infer<typeof base_device_model_v1>;
export declare const device_model_v1: z.ZodIntersection<z.ZodObject<{
    device_model_id: z.ZodString;
    manufacturer: z.ZodObject<Omit<{
        manufacturer_id: z.ZodString;
        display_name: z.ZodString;
        logo: z.ZodOptional<z.ZodObject<{
            url: z.ZodString;
            width: z.ZodNumber;
            height: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            height: number;
            width: number;
            url: string;
        }, {
            height: number;
            width: number;
            url: string;
        }>>;
        integration: z.ZodEnum<["stable", "beta", "planned", "unsupported", "inquire"]>;
        integration_support_level: z.ZodEnum<["stable", "beta", "planned", "unsupported", "inquire"]>;
        is_connect_webview_supported: z.ZodBoolean;
        requires_seam_support_to_add_account: z.ZodBoolean;
        device_model_count: z.ZodNumber;
        annotations: z.ZodArray<z.ZodObject<{
            annotation_code: z.ZodEnum<["subscription_required"]>;
            message: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            message: string;
            annotation_code: "subscription_required";
        }, {
            message: string;
            annotation_code: "subscription_required";
        }>, "many">;
    }, "device_model_count">, "strip", z.ZodTypeAny, {
        display_name: string;
        manufacturer_id: string;
        integration: "beta" | "stable" | "unsupported" | "planned" | "inquire";
        integration_support_level: "beta" | "stable" | "unsupported" | "planned" | "inquire";
        is_connect_webview_supported: boolean;
        requires_seam_support_to_add_account: boolean;
        annotations: {
            message: string;
            annotation_code: "subscription_required";
        }[];
        logo?: {
            height: number;
            width: number;
            url: string;
        } | undefined;
    }, {
        display_name: string;
        manufacturer_id: string;
        integration: "beta" | "stable" | "unsupported" | "planned" | "inquire";
        integration_support_level: "beta" | "stable" | "unsupported" | "planned" | "inquire";
        is_connect_webview_supported: boolean;
        requires_seam_support_to_add_account: boolean;
        annotations: {
            message: string;
            annotation_code: "subscription_required";
        }[];
        logo?: {
            height: number;
            width: number;
            url: string;
        } | undefined;
    }>;
    is_device_supported: z.ZodBoolean;
    display_name: z.ZodString;
    description: z.ZodString;
    product_url: z.ZodOptional<z.ZodString>;
    main_connection_type: z.ZodEnum<["wifi", "zwave", "zigbee", "unknown"]>;
    aesthetic_variants: z.ZodArray<z.ZodObject<{
        slug: z.ZodString;
        display_name: z.ZodString;
        primary_color_hex: z.ZodOptional<z.ZodString>;
        manufacturer_sku: z.ZodOptional<z.ZodString>;
        front_image: z.ZodOptional<z.ZodObject<{
            url: z.ZodString;
            width: z.ZodNumber;
            height: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            height: number;
            width: number;
            url: string;
        }, {
            height: number;
            width: number;
            url: string;
        }>>;
        back_image: z.ZodOptional<z.ZodObject<{
            url: z.ZodString;
            width: z.ZodNumber;
            height: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            height: number;
            width: number;
            url: string;
        }, {
            height: number;
            width: number;
            url: string;
        }>>;
        images: z.ZodArray<z.ZodObject<{
            url: z.ZodString;
            width: z.ZodNumber;
            height: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            height: number;
            width: number;
            url: string;
        }, {
            height: number;
            width: number;
            url: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        display_name: string;
        slug: string;
        images: {
            height: number;
            width: number;
            url: string;
        }[];
        primary_color_hex?: string | undefined;
        manufacturer_sku?: string | undefined;
        front_image?: {
            height: number;
            width: number;
            url: string;
        } | undefined;
        back_image?: {
            height: number;
            width: number;
            url: string;
        } | undefined;
    }, {
        display_name: string;
        slug: string;
        images: {
            height: number;
            width: number;
            url: string;
        }[];
        primary_color_hex?: string | undefined;
        manufacturer_sku?: string | undefined;
        front_image?: {
            height: number;
            width: number;
            url: string;
        } | undefined;
        back_image?: {
            height: number;
            width: number;
            url: string;
        } | undefined;
    }>, "many">;
    power_sources: z.ZodArray<z.ZodEnum<["battery", "hardwired", "mechanical_harvesting", "wireless", "ethernet"]>, "many">;
}, "strip", z.ZodTypeAny, {
    description: string;
    display_name: string;
    device_model_id: string;
    manufacturer: {
        display_name: string;
        manufacturer_id: string;
        integration: "beta" | "stable" | "unsupported" | "planned" | "inquire";
        integration_support_level: "beta" | "stable" | "unsupported" | "planned" | "inquire";
        is_connect_webview_supported: boolean;
        requires_seam_support_to_add_account: boolean;
        annotations: {
            message: string;
            annotation_code: "subscription_required";
        }[];
        logo?: {
            height: number;
            width: number;
            url: string;
        } | undefined;
    };
    is_device_supported: boolean;
    main_connection_type: "unknown" | "wifi" | "zwave" | "zigbee";
    aesthetic_variants: {
        display_name: string;
        slug: string;
        images: {
            height: number;
            width: number;
            url: string;
        }[];
        primary_color_hex?: string | undefined;
        manufacturer_sku?: string | undefined;
        front_image?: {
            height: number;
            width: number;
            url: string;
        } | undefined;
        back_image?: {
            height: number;
            width: number;
            url: string;
        } | undefined;
    }[];
    power_sources: ("battery" | "hardwired" | "mechanical_harvesting" | "wireless" | "ethernet")[];
    product_url?: string | undefined;
}, {
    description: string;
    display_name: string;
    device_model_id: string;
    manufacturer: {
        display_name: string;
        manufacturer_id: string;
        integration: "beta" | "stable" | "unsupported" | "planned" | "inquire";
        integration_support_level: "beta" | "stable" | "unsupported" | "planned" | "inquire";
        is_connect_webview_supported: boolean;
        requires_seam_support_to_add_account: boolean;
        annotations: {
            message: string;
            annotation_code: "subscription_required";
        }[];
        logo?: {
            height: number;
            width: number;
            url: string;
        } | undefined;
    };
    is_device_supported: boolean;
    main_connection_type: "unknown" | "wifi" | "zwave" | "zigbee";
    aesthetic_variants: {
        display_name: string;
        slug: string;
        images: {
            height: number;
            width: number;
            url: string;
        }[];
        primary_color_hex?: string | undefined;
        manufacturer_sku?: string | undefined;
        front_image?: {
            height: number;
            width: number;
            url: string;
        } | undefined;
        back_image?: {
            height: number;
            width: number;
            url: string;
        } | undefined;
    }[];
    power_sources: ("battery" | "hardwired" | "mechanical_harvesting" | "wireless" | "ethernet")[];
    product_url?: string | undefined;
}>, z.ZodDiscriminatedUnion<"main_category", [z.ZodObject<{
    main_category: z.ZodLiteral<"smartlock">;
    physical_properties: z.ZodObject<{
        lock_type: z.ZodEnum<["deadbolt", "lever", "mortise", "lockbox", "cylinder", "padlock", "locker", "unknown"]>;
        has_physical_key: z.ZodBoolean;
        has_camera: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        lock_type: "unknown" | "deadbolt" | "lever" | "mortise" | "lockbox" | "cylinder" | "padlock" | "locker";
        has_physical_key: boolean;
        has_camera: boolean;
    }, {
        lock_type: "unknown" | "deadbolt" | "lever" | "mortise" | "lockbox" | "cylinder" | "padlock" | "locker";
        has_physical_key: boolean;
        has_camera: boolean;
    }>;
    software_features: z.ZodObject<{
        can_remotely_unlock: z.ZodBoolean;
        can_program_access_codes: z.ZodBoolean;
        can_program_access_schedules: z.ZodBoolean;
        can_program_access_codes_offline: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_program_access_schedules: boolean;
        can_program_access_codes_offline: boolean;
    }, {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_program_access_schedules: boolean;
        can_program_access_codes_offline: boolean;
    }>;
}, "strip", z.ZodTypeAny, {
    main_category: "smartlock";
    physical_properties: {
        lock_type: "unknown" | "deadbolt" | "lever" | "mortise" | "lockbox" | "cylinder" | "padlock" | "locker";
        has_physical_key: boolean;
        has_camera: boolean;
    };
    software_features: {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_program_access_schedules: boolean;
        can_program_access_codes_offline: boolean;
    };
}, {
    main_category: "smartlock";
    physical_properties: {
        lock_type: "unknown" | "deadbolt" | "lever" | "mortise" | "lockbox" | "cylinder" | "padlock" | "locker";
        has_physical_key: boolean;
        has_camera: boolean;
    };
    software_features: {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_program_access_schedules: boolean;
        can_program_access_codes_offline: boolean;
    };
}>, z.ZodObject<{
    main_category: z.ZodLiteral<"sensor">;
    physical_properties: z.ZodObject<{
        has_noise_sensor: z.ZodBoolean;
        has_humidity_sensor: z.ZodBoolean;
        has_temperature_sensor: z.ZodBoolean;
        has_occupancy_detection: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        has_noise_sensor: boolean;
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
    }, {
        has_noise_sensor: boolean;
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
    }>;
}, "strip", z.ZodTypeAny, {
    main_category: "sensor";
    physical_properties: {
        has_noise_sensor: boolean;
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
    };
}, {
    main_category: "sensor";
    physical_properties: {
        has_noise_sensor: boolean;
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
    };
}>, z.ZodObject<{
    main_category: z.ZodLiteral<"thermostat">;
    physical_properties: z.ZodObject<{
        available_modes: z.ZodArray<z.ZodEnum<["heat", "cool", "fan", "eco"]>, "many">;
        is_heat_pump_compatible: z.ZodBoolean;
        has_occupancy_detection: z.ZodBoolean;
        supports_demand_response: z.ZodBoolean;
        has_humidity_sensor: z.ZodBoolean;
        has_temperature_sensor: z.ZodBoolean;
        supports_emergency_heating_mode: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
        available_modes: ("heat" | "cool" | "fan" | "eco")[];
        is_heat_pump_compatible: boolean;
        supports_demand_response: boolean;
        supports_emergency_heating_mode: boolean;
    }, {
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
        available_modes: ("heat" | "cool" | "fan" | "eco")[];
        is_heat_pump_compatible: boolean;
        supports_demand_response: boolean;
        supports_emergency_heating_mode: boolean;
    }>;
    software_features: z.ZodObject<{
        can_program_climate_schedules: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        can_program_climate_schedules: boolean;
    }, {
        can_program_climate_schedules: boolean;
    }>;
}, "strip", z.ZodTypeAny, {
    main_category: "thermostat";
    physical_properties: {
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
        available_modes: ("heat" | "cool" | "fan" | "eco")[];
        is_heat_pump_compatible: boolean;
        supports_demand_response: boolean;
        supports_emergency_heating_mode: boolean;
    };
    software_features: {
        can_program_climate_schedules: boolean;
    };
}, {
    main_category: "thermostat";
    physical_properties: {
        has_humidity_sensor: boolean;
        has_temperature_sensor: boolean;
        has_occupancy_detection: boolean;
        available_modes: ("heat" | "cool" | "fan" | "eco")[];
        is_heat_pump_compatible: boolean;
        supports_demand_response: boolean;
        supports_emergency_heating_mode: boolean;
    };
    software_features: {
        can_program_climate_schedules: boolean;
    };
}>, z.ZodObject<{
    main_category: z.ZodLiteral<"relay">;
}, "strip", z.ZodTypeAny, {
    main_category: "relay";
}, {
    main_category: "relay";
}>, z.ZodObject<{
    main_category: z.ZodLiteral<"intercom">;
    physical_properties: z.ZodObject<{
        has_camera: z.ZodBoolean;
        has_rfid_reader: z.ZodDefault<z.ZodBoolean>;
        has_nfc_reader: z.ZodDefault<z.ZodBoolean>;
        has_wiegand_interface: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        has_camera: boolean;
        has_rfid_reader: boolean;
        has_nfc_reader: boolean;
        has_wiegand_interface: boolean;
    }, {
        has_camera: boolean;
        has_rfid_reader?: boolean | undefined;
        has_nfc_reader?: boolean | undefined;
        has_wiegand_interface?: boolean | undefined;
    }>;
    software_features: z.ZodObject<{
        can_remotely_unlock: z.ZodBoolean;
        can_program_access_codes: z.ZodBoolean;
        can_unlock_with_face_recognition: z.ZodDefault<z.ZodBoolean>;
        supports_onvif: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_unlock_with_face_recognition: boolean;
        supports_onvif: boolean;
    }, {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_unlock_with_face_recognition?: boolean | undefined;
        supports_onvif?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    main_category: "intercom";
    physical_properties: {
        has_camera: boolean;
        has_rfid_reader: boolean;
        has_nfc_reader: boolean;
        has_wiegand_interface: boolean;
    };
    software_features: {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_unlock_with_face_recognition: boolean;
        supports_onvif: boolean;
    };
}, {
    main_category: "intercom";
    physical_properties: {
        has_camera: boolean;
        has_rfid_reader?: boolean | undefined;
        has_nfc_reader?: boolean | undefined;
        has_wiegand_interface?: boolean | undefined;
    };
    software_features: {
        can_remotely_unlock: boolean;
        can_program_access_codes: boolean;
        can_unlock_with_face_recognition?: boolean | undefined;
        supports_onvif?: boolean | undefined;
    };
}>, z.ZodObject<{
    main_category: z.ZodLiteral<"accessory">;
}, "strip", z.ZodTypeAny, {
    main_category: "accessory";
}, {
    main_category: "accessory";
}>]>>;
export type DeviceModelV1 = z.infer<typeof device_model_v1>;
